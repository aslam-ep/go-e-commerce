definitions:
  address.Address:
    properties:
      address_line_1:
        type: string
      address_line_2:
        type: string
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      id:
        type: integer
      is_default:
        type: boolean
      postal_code:
        type: string
      state:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  address.AddressReq:
    properties:
      address_line_1:
        maxLength: 250
        minLength: 5
        type: string
      address_line_2:
        maxLength: 250
        type: string
      city:
        maxLength: 100
        minLength: 3
        type: string
      country:
        maxLength: 100
        minLength: 3
        type: string
      id:
        type: integer
      postal_code:
        maxLength: 100
        minLength: 3
        type: string
      state:
        maxLength: 100
        minLength: 3
        type: string
      user_id:
        type: integer
    required:
    - address_line_1
    - city
    - country
    - postal_code
    - state
    type: object
  address.AddressRes:
    properties:
      addresses:
        items:
          $ref: '#/definitions/address.Address'
        type: array
      count:
        type: integer
    type: object
  auth.LoginReq:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginRes:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  auth.RefreshTokenReq:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  auth.RefreshTokenRes:
    properties:
      access_token:
        type: string
    type: object
  user.CreateUserReq:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
      role:
        enum:
        - user
        - vendor
        type: string
    required:
    - email
    - name
    - password
    - phone
    - role
    type: object
  user.ResetPasswordReq:
    properties:
      current_password:
        minLength: 6
        type: string
      id:
        type: integer
      new_password:
        minLength: 6
        type: string
    required:
    - current_password
    - new_password
    type: object
  user.UpdateUserReq:
    properties:
      id:
        type: integer
      name:
        maxLength: 100
        minLength: 3
        type: string
      phone:
        type: string
      role:
        enum:
        - user
        - vendor
        type: string
    required:
    - id
    - name
    - phone
    - role
    type: object
  user.UserRes:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      role:
        type: string
      udapted_at:
        type: string
    type: object
  utils.MessageRes:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user, on success get the refreshToken and accessToken
      parameters:
      - description: Login request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: Login response
          schema:
            $ref: '#/definitions/auth.LoginRes'
        "400":
          description: Default response
          schema:
            $ref: '#/definitions/utils.MessageRes'
        "401":
          description: Default response
          schema:
            $ref: '#/definitions/utils.MessageRes'
      summary: Login user
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh token, send the new access token based on refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshTokenReq'
      produces:
      - application/json
      responses:
        "200":
          description: Refresh token response
          schema:
            $ref: '#/definitions/auth.RefreshTokenRes'
        "400":
          description: Default response
          schema:
            $ref: '#/definitions/utils.MessageRes'
        "401":
          description: Default response
          schema:
            $ref: '#/definitions/utils.MessageRes'
      summary: Refresh token
      tags:
      - auth
  /users/{id}:
    post:
      consumes:
      - application/json
      description: Get User Details by provided ID in url
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.MessageRes'
      summary: Get User Details
      tags:
      - user
  /users/{id}/addresses/:
    get:
      consumes:
      - application/json
      description: Get all addresses for the authenticated user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/address.AddressRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.MessageRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.MessageRes'
      security:
      - BearerAuth: []
      summary: Get all addresses
      tags:
      - Address
  /users/{id}/addresses/{adddress_id}:
    get:
      consumes:
      - application/json
      description: Get a specific address by ID for the authenticated user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Address ID
        in: path
        name: address_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/address.Address'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.MessageRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.MessageRes'
      security:
      - BearerAuth: []
      summary: Get address by ID
      tags:
      - Address
  /users/{id}/addresses/{address_id}/delete:
    delete:
      consumes:
      - application/json
      description: Delete a specific address by ID for the authenticated user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Address ID
        in: path
        name: address_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.MessageRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.MessageRes'
      security:
      - BearerAuth: []
      summary: Delete address
      tags:
      - Address
  /users/{id}/addresses/{address_id}/set-default:
    put:
      consumes:
      - application/json
      description: Set a specific address as the default for the authenticated user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Address ID
        in: path
        name: address_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.MessageRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.MessageRes'
      security:
      - BearerAuth: []
      summary: Set default address
      tags:
      - Address
  /users/{id}/addresses/{address_id}/update:
    put:
      consumes:
      - application/json
      description: Updated address by ID for the current user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Address ID
        in: path
        name: address_id
        required: true
        type: integer
      - description: Address request for create and update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/address.AddressReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/address.Address'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.MessageRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.MessageRes'
      security:
      - BearerAuth: []
      summary: Updated address by ID
      tags:
      - Address
  /users/{id}/addresses/create:
    post:
      consumes:
      - application/json
      description: Adding a new address for the authenticated user
      parameters:
      - description: Address request for create and update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/address.AddressReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/address.Address'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.MessageRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.MessageRes'
      security:
      - BearerAuth: []
      summary: Adding a new address
      tags:
      - Address
  /users/{id}/delete:
    delete:
      consumes:
      - application/json
      description: Delete User Details by provided ID in url
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.MessageRes'
      summary: Delete User Details
      tags:
      - user
  /users/{id}/password-reset:
    put:
      consumes:
      - application/json
      description: Reset User Password by provided ID in url and password in body
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Password change request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.ResetPasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.MessageRes'
      summary: Reset User Password
      tags:
      - user
  /users/{id}/update:
    put:
      consumes:
      - application/json
      description: Update User Details by provided ID in url and details in body
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.MessageRes'
      summary: Update User Details
      tags:
      - user
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details
      parameters:
      - description: User registration request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.MessageRes'
      summary: Register a new user
      tags:
      - user
swagger: "2.0"
